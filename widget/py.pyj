editable = cfg.data.editable
data_table = cfg.data.table
data_category = cfg.data.category
data_title = cfg.data.title
data_order = cfg.data.order
data_details = cfg.data.details
data_details_unfolded = cfg.data.details_unfolded
data_archived = cfg.data.archived
data_highlighted = cfg.data.highlighted
categories_table = cfg.categories.table
categories_title = cfg.categories.title
categories_order = cfg.categories.order
categories_color = cfg.categories.color

md = markdownit()

def updateCategories(el):
  categories_list = el.parentElement.children
  grist.docApi.applyUserActions(Array(Array(
    "BulkUpdateRecord", categories_table,\
    [int(child.dataset.id) for child in categories_list],\
    {categories_order: [i for i in range(len(categories_list))]}
  ))).then(main)


def updateData(el, dst, _src, _):
  console.log(el, el.parentNode)
  cards_list = el.parentNode.children
  console.log("IDX", Array.from([int(e.dataset.eid) for e in cards_list]))
  actions = Array(
    Array(
      "UpdateRecord", data_table, int($(el).data("eid")),\
      {data_category: int($(dst).parent().data("id"))}
    ),
    Array(
      "BulkUpdateRecord", data_table, Array.from([int(e.dataset.eid) for e in cards_list]),\
      {data_order: Array.from([i for i, _ in enumerate(cards_list)])}
    )
  )
  grist.docApi.applyUserActions(actions).catch(main)

  
def addCard(cat):
  grist.docApi.applyUserActions(Array(Array(
    "AddRecord", data_table, -1, {data_category: cat, data_title: "", data_order: -1}
  ))).then(main)

  
def saveCard(el, editor, evt, ok=False):
  if not (ok or evt.ctrlKey): return
  if ok or evt.keyCode == 13:
    grist.docApi.applyUserActions(Array(Array(
      "UpdateRecord", data_table, int(el.dataset.eid), {data_title: editor.val()}
    ))).then(main)
  elif evt.keyCode == 46:
    grist.docApi.applyUserActions(Array(Array(
      "RemoveRecord", data_table, int(el.dataset.eid)
    ))).then(main)

    
selected_card = None
def editCard(el):
  global selected_card
  if "editing" in el.dataset and int(el.dataset.editing):
    return
  div = el.firstChild.children[0].children[1]
  if selected_card != el.dataset.eid:
    selected_card = el.dataset.eid
    div.style.fontWeight = "bold"
    grist.setCursorPos({"rowId": int(selected_card)}).then(main).catch(main)
    return
  if editable:
    editor = $("<TEXTAREA>").attr(
      "id", str.format("editor_{}", el.dataset.eid)
    ).html($(div).html()).on(
      "focusout", def(evt): saveCard(el, editor, evt, True)
    )
    $(el).empty().data(
      "editing", 1
    ).on(
      "keydown",
      def(evt): saveCard(el, editor, evt)
    ).append(editor)

    
def display(data, categories, rec):
  global selected_card, selected_cards
  if rec:
    console.log("REC", type(rec), rec)
    if Array.isArray(rec):
      selected_cards = [ r.id for r in rec ]
    else:
      selected_card = rec.id
  categories_list = sorted(
    ({
      "id": category_id,
      "title": categories[categories_title][i],
      "order": categories[categories_order][i],
      "color": categories[categories_color][i]
    } for i, category_id in enumerate(categories.id)),
    key=def(c): return c.order
  )
  $("#stl").remove()
  $("<style>").attr("id", "stl").html(
    str.join("\n", (
      "." + cat['color'].replace("#", "_") + "{background-color:" + cat['color'] + "}"
      for cat in categories_list
    ))
  ).appendTo("head")
  cards = []
  for i, eid in enumerate(data.id):
    if (
      (not data_archived or not data[data_archived][i])
      and (not selected_cards or eid in selected_cards)
    ):
      card = {
        "id": eid,
        "title": data[data_title][i],
        "category": data[data_category][i],
        "order": data[data_order][i]
      }
      for k in data_details:
        card[k] = data[k][i]
      cards.append(card)
  cards.pysort(def(v): return v.order or 0;)
  boards = Array.from([{
    "id": str(cat["id"]),
    "title": cat["title"] + (i == 0 and " <button id='add'>+</button>" or ""),
    "class": cat["color"].replace("#", "_"),
    "item": cards.filter(
      def(card): return card["category"] == cat["id"]
    )
  } for i, cat in enumerate(categories_list)])
  $("#kanban").html("")
  new jKanban({
    "element": "#kanban",
    "boards": boards,
    "dropEl": updateData,
    "dragendBoard": updateCategories,
    "click": editCard,
    "itemHandleOptions": {
      "enabled": not not data_details,
      "handleClass": "item_handle",
      "customHandler": str.format("""
<div style="position:relative">
  <div class="item_handle" style="position:absolute;top:0;right:0">â‰¡</div>
  <div class="md">%title%</div>
  <div class="md" style="display:{}" id="details_%id%">
{}
  </div>
</div>
      """,
        data_details_unfolded and 'inline' or 'none',
        str.join("\n\n", (str.format("%{}%", d) for d in data_details))
      )
    }
  })
  $("#add").on("click", def(*_):
    addCard(categories_list[0]["id"])
  )
  try:
    $(str.format("#details_{}", selected_card)).show().closest(".kanban-item").css("background-color", data_highlighted)
  except: pass
  def render_md():
    for m in $(".md"):
      m = $(m)
      n = m.clone()
      n.html(md.render(m.html())).attr("class", "rendered")
      m.after(n)
      m.hide()
  window.setTimeout(render_md, 0)

def main(rec=None, *_):
  grist.docApi.fetchTable(data_table).then(def(t, *_):
    grist.docApi.fetchTable(categories_table).then(def(c, *_):
      display(t, c, rec)
    )
  )

  
grist.onRecords(main)
grist.onRecord(main)
main()
